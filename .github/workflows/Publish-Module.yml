name: Publish PowerShell Module

on:
  push:
    tags:
      - "v*" # Triggers the workflow on version tags

jobs:
  publish:
    name: Build and Publish Modules
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Dependencies
        shell: pwsh
        run: |
          # Install Dependencies
          $ErrorActionPreference = 'Stop'
          Set-PSResourceRepository -Name PSGallery -Trusted
          Install-PSResource -Name PackageManagement -WarningAction SilentlyContinue
          Install-PSResource -Name PowerShellGet -WarningAction SilentlyContinue
          Install-PSResource -Name Microsoft.PowerShell.PSResourceGet -WarningAction SilentlyContinue
          Install-PSResource -Name Pester -WarningAction SilentlyContinue

          # Add the PowerShell modules path to the PATH environment variable
          $env:PATH = "/home/runner/.local/share/powershell/Scripts:$($env:PATH)"
          Write-Output "Updated PATH: $env:PATH"

          # Add the PowerShell modules path to the PATH environment variable
          $env:PSModulePath = "/home/runner/.local/share/powershell/Scripts:$($env:PSModulePath)"
          Write-Output "Updated PSModulePath: $env:PSModulePath"

      - name: Validate Module Versions
        shell: pwsh
        run: |
          # Validate the version of the module manifests
          $ErrorActionPreference = 'Stop'
          ./Scripts/Validate-PSModuleManifestVersion.ps1 -Version ${{ github.ref_name }}

      - name: Publish to Repository
        id: published_modules
        shell: pwsh
        env:
          PSResourceRepositoryApiKey: ${{ secrets.PSGalleryApiKey }}
        run: |
          # Publish the modules to the PSGallery
          $ErrorActionPreference = 'Stop'
          $Modules = @(./Scripts/Publish-PSModuleToRepository.ps1) -join ','
          echo "module_names=$Modules" >> $env:GITHUB_OUTPUT

      - name: Generate Release Notes
        shell: pwsh
        run: |
          # Generate the release notes for the GitHub release
          $ErrorActionPreference = 'Stop'
          $currentTag = "${{ github.ref_name }}"
          $IsPrerelease = $currentTag -match '-'
          $releases = ./Scripts/Get-GitRepositoryVersionDetails.ps1 -CurrentTag $currentTag
          $body = if ($IsPrerelease) {
            "This is a pre-release version of the module. It is not recommended for production use.`n"
          }
          else {
            "This is a release version of the module and may be used in production environments.`n"
          }
          if ($IsPrerelease -and $releases.nearestPreReleaseTag) {
            $body += "`nChanges since last pre-release version: [${{ github.ref_name }}...$($releases.nearestPreReleaseTag)](https://github.com/${{ github.repository }}/compare/$($releases.nearestPreReleaseTag)...${{ github.ref_name }})"
          }
          if ($releases.nearestReleaseTag) {
            $body += "`nChanges since last release version: [${{ github.ref_name }}...$($releases.nearestReleaseTag)](https://github.com/${{ github.repository }}/compare/$($releases.nearestReleaseTag)...${{ github.ref_name }})"
          }
          echo 'body<<EOF' >> $env:GITHUB_OUTPUT
          echo "$body" >> $env:GITHUB_OUTPUT
          echo 'EOF' >> $env:GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ contains(github.ref_name, '-') && 'Prerelease ' || 'Release ' }}${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          body: |
            ${{ steps.release_text.outputs.body }}

      - name: Download signed nupkg from Repository and upload to GitHub Release
        shell: pwsh
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Download the signed nupkg files from the PSGallery and upload them to the GitHub release
          $ErrorActionPreference = 'Stop'
          ./Scripts/Receive-PSModuleFromRepository.ps1 -Modules "${{ steps.published_modules.outputs.published_modules }}" | ForEach-Object {
            gh release upload ${{ github.ref_name }} $_
          }

      - name: Upload ZIP archives to GitHub Release
        id: compressed_module_files
        shell: pwsh
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Compress the module files and upload them to the GitHub release
          $ErrorActionPreference = 'Stop'
          ./Scripts/Compress-PSModule.ps1 -Modules "${{ steps.published_modules.outputs.published_modules }}" | ForEach-Object {
            gh release upload ${{ github.ref_name }} $_
          }
