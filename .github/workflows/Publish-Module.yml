name: Publish PowerShell Module

on:
  push:
    tags:
      - "v*" # Triggers the workflow on version tags

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Dependencies
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Install-PSResource -Name PackageManagement -Scope CurrentUser
          Install-PSResource -Name PowerShellGet -Scope CurrentUser
          Install-PSResource -Name Microsoft.PowerShell.PSResourceGet -Scope CurrentUser
          Install-PSResource -Name Pester -Scope CurrentUser

      - name: Validate Module Versions
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          ./scripts/Validate-ModuleVersion.ps1 -Version ${{ github.ref_name }}

      - name: Determine tags for comparison
        id: compare_tags
        run: |
          # Get all tags, then sort them by version
          git tag --list "v*" | sort --version-sort > sorted_tags.txt

          # Initialize variables
          LATEST_RELEASE_TAG=""
          LATEST_PRERELEASE_TAG=""
          PREVIOUS_TAG=""

          # Iterate through sorted tags to find the latest release and prerelease tags
          while read -r tag; do
              # This regex matches both release and prerelease tags
              if [[ "$tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
                  # If it's a release tag (no prerelease identifier)
                  if [[ ! "$tag" =~ - ]]; then
                      LATEST_RELEASE_TAG="$tag"
                      # Reset LATEST_PRERELEASE_TAG if a new release is found
                      LATEST_PRERELEASE_TAG=""
                  else
                      # Only update LATEST_PRERELEASE_TAG if it's after the latest release
                      if [[ "$LATEST_RELEASE_TAG" != "" && "$PREVIOUS_TAG" == "$LATEST_RELEASE_TAG" ]]; then
                          LATEST_PRERELEASE_TAG="$tag"
                      fi
                  fi
              fi
              PREVIOUS_TAG="$tag"
          done < sorted_tags.txt

          # Determine if the latest prerelease tag is after the latest release tag
          LATEST_PRERELEASE_AFTER_RELEASE="false"
          if [[ "$LATEST_PRERELEASE_TAG" != "" && "$LATEST_PRERELEASE_TAG" != "$LATEST_RELEASE_TAG" ]]; then
              LATEST_PRERELEASE_AFTER_RELEASE="true"
          fi

          # Output the findings
          echo "::set-output name=latest_release_tag::$LATEST_RELEASE_TAG"
          echo "::set-output name=latest_prerelease_tag::$LATEST_PRERELEASE_TAG"
          echo "::set-output name=latest_prerelease_after_release::$LATEST_PRERELEASE_AFTER_RELEASE"
        shell: bash

      - name: Publish to PowerShell Gallery
        shell: pwsh
        env:
          PSResourceRepositoryApiKey: ${{ secrets.PSGalleryApiKey }}
        run: |
          $ErrorActionPreference = 'Stop'
          $Modules = @(./Scripts/Publish-PSModuleToRepository.ps1) - join ','
          echo "published_modules=$Modules" >> $env:GITHUB_ENV

      - name: Download nupkg from Repository
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $Modules = @(./Scripts/Receive-PSModuleFromRepository.ps1 -Modules $env:published_modules ) -join ','
          echo "downloaded_modules=$Modules" >> $env:GITHUB_ENV

      - name: Create ZIP archives
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $Modules = @(./Scripts/Compress-PSModule.ps1 -Modules $env:published_modules ) -join ','
          echo "compressed_modules=$Modules" >> $env:GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ contains(github.ref_name, '-') && 'Prerelease ' || 'Release ' }}${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          body: |
            This release is automatically generated.

            Changes: [${{ github.ref_name }}...${{ steps.latest_release.outputs.tag }}](https://github.com/${{ github.repository }}/compare/${{ steps.latest_release.outputs.tag }}...${{ github.ref_name }})

      # - name: Upload PowerShell Module to Release
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./$GITHUB_REPOSITORY-$GITHUB_REF_NAME.zip
      #     asset_name: $GITHUB_REPOSITORY-$GITHUB_REF_NAME.zip
      #     asset_content_type: application/zip
